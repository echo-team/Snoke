.TH "Labyrinth" 3 "Thu May 2 2019" "Snoke" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Labyrinth \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <labyrinth\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBsetLabyrinth\fP (\fBPoint\fP dimensions)"
.br
.ti -1c
.RI "void \fBaddSnake\fP (\fBSnake\fP *\fBsnake\fP)"
.br
.ti -1c
.RI "bool \fBaddPoint\fP (\fBPoint\fP p)"
.br
.ti -1c
.RI "bool \fBremPoint\fP (\fBPoint\fP p)"
.br
.ti -1c
.RI "void \fBdisplayHandler\fP (\fBPoint\fP *change[2]=NULL, int size=0)"
.br
.ti -1c
.RI "bool \fBisFree\fP (\fBPoint\fP p)"
.br
.ti -1c
.RI "bool \fBsave\fP (char name[\fBMAXLINE\fP])"
.br
.ti -1c
.RI "bool \fBload\fP (char name[\fBMAXLINE\fP])"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBdisplayLabyrinth\fP ()"
.br
.ti -1c
.RI "void \fBdisplayUpdated\fP (\fBPoint\fP *update[2], int size)"
.br
.ti -1c
.RI "void \fBupdateLabyrinth\fP (\fBPoint\fP *update[2], int size)"
.br
.ti -1c
.RI "void \fBdisplayFull\fP ()"
.br
.ti -1c
.RI "void \fBsizeHandler\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "char ** \fBlabyrinth\fP"
.br
.ti -1c
.RI "std::string \fBreserved\fP = '!'"
.br
.ti -1c
.RI "int \fBprevDisplayMethod\fP = 0"
.br
.ti -1c
.RI "\fBSnake\fP * \fBsnake\fP = NULL"
.br
.ti -1c
.RI "\fBPoint\fP \fBstart\fP"
.br
.ti -1c
.RI "\fBPoint\fP \fBend\fP"
.br
.ti -1c
.RI "\fBPoint\fP \fBprevStart\fP"
.br
.ti -1c
.RI "\fBPoint\fP \fBprevEnd\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
class for containing and siplaying the game field 
.PP
\fBParameters:\fP
.RS 4
\fI{char**}\fP labyrinth - game field, consisting of chars 
.br
\fI{std::string}\fP reserved - array of reserved chars for inside usage 
.br
\fI{int}\fP prevDisplayMethod - value, containing the makr of which display method was previously called(is used in displaying) 
.br
\fI{Snake*}\fP snake - a pointer to a local_player's snake  {Point} start - a top left corner from which the drawing of the current cycle starts 
.br
\fI{Point}\fP end - a bottom right corner at which the drawing of the current cycle ends 
.RE
.PP

.PP
Definition at line 36 of file labyrinth\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "bool Labyrinth::addPoint (\fBPoint\fPp)"
Adding Point to the labyrinth with the check of correction 
.PP
\fBParameters:\fP
.RS 4
\fI{Point}\fP p - point to add to the labyrinth 
.RE
.PP
\fBReturns:\fP
.RS 4
{bool} - mark of whether the Point was added 
.RE
.PP

.PP
Definition at line 267 of file labyrinth\&.cpp\&.
.SS "void Labyrinth::addSnake (\fBSnake\fP *snake)"
Adding snake to the laburinth and getting the host snake(firest added snake) 
.PP
\fBParameters:\fP
.RS 4
\fI{Snake*}\fP snake - a snake to add 
.RE
.PP

.PP
Definition at line 50 of file labyrinth\&.cpp\&.
.SS "void Labyrinth::displayFull ()\fC [private]\fP"
redraw every Point of the labyrinth 
.PP
Definition at line 187 of file labyrinth\&.cpp\&.
.SS "void Labyrinth::displayHandler (\fBPoint\fP *change[2] = \fCNULL\fP, intsize = \fC0\fP)"
A method which decides what dispaly method will be used in each situation 
.PP
\fBParameters:\fP
.RS 4
\fI{Point*}\fP change - 2-dimensional array of changes needed to be applied to the labyrinth 
.br
\fI{int}\fP size - the size of the change array 
.RE
.PP

.PP
Definition at line 68 of file labyrinth\&.cpp\&.
.SS "void Labyrinth::displayLabyrinth ()\fC [private]\fP"
display labyrinth partialy, using the start and end Points 
.PP
Definition at line 199 of file labyrinth\&.cpp\&.
.SS "void Labyrinth::displayUpdated (\fBPoint\fP *update[2], intsize)\fC [private]\fP"
draw only the changed Points when the labyrinth is being fully displayed 
.PP
Definition at line 216 of file labyrinth\&.cpp\&.
.SS "bool Labyrinth::isFree (\fBPoint\fPp)"
Mark of if the asked Point is free 
.PP
\fBParameters:\fP
.RS 4
\fI{Point}\fP p - Point to check in the labyrinth 
.RE
.PP
\fBReturns:\fP
.RS 4
{bool} - mark of whether the Point is free 
.RE
.PP

.PP
Definition at line 257 of file labyrinth\&.cpp\&.
.SS "bool Labyrinth::load (charname[MAXLINE])"
Mehod to load labyrinth from the file 
.PP
\fBParameters:\fP
.RS 4
\fI{char*}\fP name - name of the file to read from 
.RE
.PP
\fBReturns:\fP
.RS 4
{bool} - mark os successful loading 
.RE
.PP

.PP
Definition at line 335 of file labyrinth\&.cpp\&.
.SS "bool Labyrinth::remPoint (\fBPoint\fPp)"
Remove Point from the labyrinth 
.PP
\fBParameters:\fP
.RS 4
\fI{Point}\fP p - point to remove from the labyrinth 
.RE
.PP
\fBReturns:\fP
.RS 4
{bool} - mark of whether the Point was removed 
.RE
.PP

.PP
Definition at line 282 of file labyrinth\&.cpp\&.
.SS "bool Labyrinth::save (charname[MAXLINE])"
Method to save labyritnh(borders and obstacles, defined in reserved string) to the file 
.PP
\fBParameters:\fP
.RS 4
\fI{char*}\fP name - name of the file, where to sace the labyrinth 
.RE
.PP
\fBReturns:\fP
.RS 4
{bool} - mark of whether the labyrinth was successfully saved 
.RE
.PP

.PP
Definition at line 293 of file labyrinth\&.cpp\&.
.SS "void Labyrinth::setLabyrinth (\fBPoint\fPgameFieldSize)"
Sets the default values fro the variables as well as generating the labyritnh array with borders 
.PP
\fBParameters:\fP
.RS 4
\fI{Point}\fP gameFieldSize - a size of the labyrinth 
.RE
.PP

.PP
Definition at line 6 of file labyrinth\&.cpp\&.
.SS "void Labyrinth::sizeHandler ()\fC [private]\fP"
A method, which sets start and end values depending on the position of local_player's snake head and current console size 
.PP
Definition at line 127 of file labyrinth\&.cpp\&.
.SS "void Labyrinth::updateLabyrinth (\fBPoint\fP *update[2], intsize)\fC [private]\fP"
Updating the labyrinth(changing the values of some Points) 
.PP
\fBParameters:\fP
.RS 4
\fI{Point*}\fP update - 2-dimensional array of changes needed to be applied to the labyrinth 
.br
\fI{int}\fP size - the longest sequence for updating [max(len(update[0], update[1]))] 
.RE
.PP

.PP
Definition at line 234 of file labyrinth\&.cpp\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBPoint\fP Labyrinth::end\fC [private]\fP"

.PP
Definition at line 44 of file labyrinth\&.h\&.
.SS "char** Labyrinth::labyrinth\fC [private]\fP"

.PP
Definition at line 39 of file labyrinth\&.h\&.
.SS "int Labyrinth::prevDisplayMethod = 0\fC [private]\fP"

.PP
Definition at line 41 of file labyrinth\&.h\&.
.SS "\fBPoint\fP Labyrinth::prevEnd\fC [private]\fP"

.PP
Definition at line 46 of file labyrinth\&.h\&.
.SS "\fBPoint\fP Labyrinth::prevStart\fC [private]\fP"

.PP
Definition at line 45 of file labyrinth\&.h\&.
.SS "std::string Labyrinth::reserved = '!'\fC [private]\fP"

.PP
Definition at line 40 of file labyrinth\&.h\&.
.SS "\fBSnake\fP* Labyrinth::snake = NULL\fC [private]\fP"

.PP
Definition at line 42 of file labyrinth\&.h\&.
.SS "\fBPoint\fP Labyrinth::start\fC [private]\fP"

.PP
Definition at line 43 of file labyrinth\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Snoke from the source code\&.
