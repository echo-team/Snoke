.TH "Snake" 3 "Thu May 2 2019" "Snoke" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Snake \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <snake\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "bool \fBinit\fP (\fBPoint\fP begin, short \fBdirection\fP, int length)"
.br
.ti -1c
.RI "void \fBsetScheme\fP ()"
.br
.ti -1c
.RI "void \fBgetCoords\fP (std::list< \fBPoint\fP > *currBody)"
.br
.ti -1c
.RI "\fBPoint\fP \fBgetHeadCoords\fP ()"
.br
.ti -1c
.RI "void \fBsetDirection\fP (int dir=0)"
.br
.ti -1c
.RI "short \fBgetDirection\fP ()"
.br
.ti -1c
.RI "bool \fBmove\fP (\fBLabyrinth\fP labyrinth, \fBBall\fP *ball, \fBPoint\fP *change[2], int changeSize)"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "short \fBcheckIntersection\fP (\fBPoint\fP check, \fBLabyrinth\fP laryrinth, \fBBall\fP *ball)"
.br
.ti -1c
.RI "short \fBcheckWisely\fP (\fBPoint\fP coords, \fBPoint\fP bcoords)"
.br
.ti -1c
.RI "void \fBmoveHead\fP (\fBPoint\fP p, \fBPoint\fP *change[2])"
.br
.ti -1c
.RI "void \fBmoveBack\fP (\fBPoint\fP p, \fBPoint\fP *cahnge[2])"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "short \fBdirection\fP"
.br
.ti -1c
.RI "std::list< \fBPointStyle\fP > \fBstyle\fP"
.br
.ti -1c
.RI "std::deque< \fBPoint\fP > \fBsnakeBody\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Describes the snake entity of the game 
.PP
\fBParameters:\fP
.RS 4
\fI{short}\fP direction - current direction where the snake is heading; 
.br
\fI{list<PointStyle>}\fP style - an array, describing how should the snake be colored 
.br
\fI{deque<Point>}\fP snakeBody - a deque type array, containing sposition of snake's body segments 
.RE
.PP

.PP
Definition at line 50 of file snake\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "short Snake::checkIntersection (\fBPoint\fPcheck, \fBLabyrinth\fPlabyrinth, \fBBall\fP *ball)\fC [private]\fP"
Checking the given point for intersections with \fBBall\fP, borders, obstacles 
.PP
\fBParameters:\fP
.RS 4
\fI{Labyrinth}\fP labyrinth - 2-dimensional array defying current state of every point of the game field (blocked or not) 
.br
\fI{Ball*}\fP ball - a pointer to a \fBBall\fP object(to check intersection with) 
.br
\fI{Point*}\fP change - 2-dimensional array of changes needed to be applied to the labyrinth 
.RE
.PP
\fBReturns:\fP
.RS 4
{short} - type of collision 
.RE
.PP

.PP
Definition at line 191 of file snake\&.cpp\&.
.SS "short Snake::checkWisely (\fBPoint\fPcoords, \fBPoint\fPbcoords)\fC [private]\fP"
If the Point of the labyrinth we are checking is not free then decide the type of collision 
.PP
\fBParameters:\fP
.RS 4
\fI{Point}\fP coords - Point we are checking for type of a collision 
.br
\fI{Point}\fP bcoords - Point, containing the coordinates of the \fBBall\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
{short} - type of the collision 
.RE
.PP

.PP
Definition at line 207 of file snake\&.cpp\&.
.SS "void Snake::getCoords (std::list< \fBPoint\fP > *currBody)"
The method to get the snake whole body coordinates(x ,y) without giving the direct access 
.PP
\fBParameters:\fP
.RS 4
\fI{std::list<Point>}\fP currBody - an array where the current snake body is copied 
.RE
.PP

.PP
Definition at line 276 of file snake\&.cpp\&.
.SS "short Snake::getDirection ()"
The method to get the current direction without giving the direct access 
.PP
\fBReturns:\fP
.RS 4
{short} 
.RE
.PP

.PP
Definition at line 255 of file snake\&.cpp\&.
.SS "\fBPoint\fP Snake::getHeadCoords ()"
The method to get the coordinates(x, y) of the snake's head without giving the direct access 
.PP
\fBReturns:\fP
.RS 4
{Point} 
.RE
.PP

.PP
Definition at line 264 of file snake\&.cpp\&.
.SS "bool Snake::init (\fBPoint\fPbegin, shortdir, intlength)"
Initializes snake 
.PP
\fBParameters:\fP
.RS 4
\fI{Point}\fP begin - starting Point of a snake(where the tail segment will be situated) 
.br
\fI{short}\fP dir - direction of snake's 'growth' as well as it's starting direction 
.br
\fI{int}\fP length - the length of a 'new born' snake 
.RE
.PP
\fBReturns:\fP
.RS 4
{bool} - mark of whether the snake is successfully initialized 
.RE
.PP

.PP
Definition at line 10 of file snake\&.cpp\&.
.SS "bool Snake::move (\fBLabyrinth\fPlabyrinth, \fBBall\fP *ball, \fBPoint\fP *change[2], intchangeSize)"
The snake movement on the game field(should be called in each iteration of the game cycle, unless the snake is 'dead') 
.PP
\fBParameters:\fP
.RS 4
\fI{Labyrinth}\fP labyrinth - the current state of the labyrinth object for intersection checking 
.br
\fI{Ball*}\fP ball - a pointer to a \fBBall\fP object(to check intersection with) 
.br
\fI{Point*}\fP change - 2-dimensional array of changes needed to be applied to the labyrinth 
.RE
.PP
\fBReturns:\fP
.RS 4
{bool} - mark of whether there was a non-boundary non-ball collision 
.RE
.PP

.PP
Definition at line 61 of file snake\&.cpp\&.
.SS "void Snake::moveBack (\fBPoint\fPp, \fBPoint\fP *change[2])\fC [private]\fP"
Checking if we need to remove the back of the snake from the labyrinth(we don't in case it has eaten the \fBBall\fP) 
.PP
\fBParameters:\fP
.RS 4
\fI{Point}\fP p - the desired position of movement 
.br
\fI{Point*}\fP change - 2-dimensional array of changes needed to be applied to the labyrinth 
.RE
.PP

.PP
Definition at line 175 of file snake\&.cpp\&.
.SS "void Snake::moveHead (\fBPoint\fPp, \fBPoint\fP *change[2])\fC [private]\fP"
Moving snake head to a described by parameters position and updating the addition to the labyrinth 
.PP
\fBParameters:\fP
.RS 4
\fI{Point}\fP p - the new head position 
.br
\fI{Point*}\fP change - 2-dimensional array of changes needed to be applied to the labyrinth 
.RE
.PP

.PP
Definition at line 164 of file snake\&.cpp\&.
.SS "void Snake::setDirection (intdirection = \fC0\fP)"
The method to set the direction where the snake is heading 
.PP
\fBParameters:\fP
.RS 4
\fI{int}\fP direction - direction of the snake we are trying to set 
.RE
.PP

.PP
Definition at line 236 of file snake\&.cpp\&.
.SS "void Snake::setScheme ()"

.SH "Member Data Documentation"
.PP 
.SS "short Snake::direction\fC [private]\fP"

.PP
Definition at line 53 of file snake\&.h\&.
.SS "std::deque<\fBPoint\fP> Snake::snakeBody\fC [private]\fP"

.PP
Definition at line 55 of file snake\&.h\&.
.SS "std::list<\fBPointStyle\fP> Snake::style\fC [private]\fP"

.PP
Definition at line 54 of file snake\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Snoke from the source code\&.
